npm run dev -> once safe, with the live serve running can see the immediate change in the browser

need to install tailwind css first before jetstream

will explore livewire
    composer require livewire/livewire
    php artisan livewire:publish --config -> this should update the providers in config/app.php with Livewire\LivewireServiceProvider::class,
    backpack for CRUD

@vite('resources/css/app.css') -> to include in the Head section to enable tailwind, need to explore "extends" (adminlte)

code .  -> to open VsCode

CRUD: (https://www.youtube.com/watch?v=LvF88TKw-BU)
=====
database: php artisan make:migration create_"tablename"_table.
    After table is created, go under database, migrations, and add the fields in the 2014-xxx_create_teblename_table file
    then -> php artisan migrate

create controller -> php artisan make: controller tablename --resource (fine tune the controller)

create model -> php artisan make:model tablename (fine tune model)

create view -> create folder under resources (tablename"s"): layout.blade.php, index.blade.php, create.blade.php, edit.blade.php, show.blade.php
        (how to use @yeild, extends, and x-app-layout, @section(content) ??)

routes -> web.php _> make sure controller path is included
    Route::resource("/tablename", controllername::class)

url reference: <a href="{{url('add-student')}}" class...>

Handling validation and error message
======================================  https://www.youtube.com/watch?v=DuwiTuXrBEI&t=1676s  (38 min)
	Controller:
		$request->validate([
			'name' => 'required',
			'email' => 'email | required',		
		])


		return redirect()->back->with('success', 'Student Added');
	Blade:
		1.) Above <form>, add
			@if(Session::has('success')
			<div class= "alert alert-success" role="alert">
				{{Session::get('success')}}
			</div>
			@endif
		2.) Right after <input type...name="name" value="{{old('name')}}">
			@error('name')
			<div class= "alert alert-danger" role="alert">
				{{$message}}   //$message is the default error message in laravel
			</div>
			@enderror


Installation of AdminLte 3 with authentication:  
(https://github.com/jeroennoten/Laravel-AdminLTE/wiki/Artisan-Console-Commands)
(https://github.com/jeroennoten/Laravel-AdminLTE/wiki/Installation)
	composer require jeroennoten/laravel-adminlte
	php artisan adminlte:install --type=full --with=main_views
	composer require laravel/ui



To prevent user from getting into the root, add this below the home routes
	Route::get('/', [App\Http\Controllers\HomeController::class, 'index'])->name('home');



Added CKeditor (https://ckeditor.com/docs/ckeditor4/latest/examples/uicolor.html)


bootstrap notes
---------------
class: to move button to the end use "float-end"


Use Livewire https://laravel-livewire.com/docs/2.x/quickstart
------------
	To install Livewire --> composer require livewire/livewire 			
	Make controller ->  php artisan make:livewire counter     //can name anything "counter"
	make controller will generate 2 files: counter controller and also counter blade
	after that modify the counter controller to retrieve from model, then add data table in blade


Remove Github from Bash:   rm -rf .git 

Emit event
So, 
1.  customershow is set to listen to the event called credentialUpdated
    protected $listeners = [
        'credentialUpdated'
    ];

2.  The Blade credential form in Customer/Credentials.blade.php is with the 
	table using wire:model, such as :

 	<input type="text" name="allCredentials[{{$index}}][entity_name]" class="form-control" 
	wire:model="allCredentials.{{$index}}.entity_name" />


3. Once the field in the subComponent (credentials) is updated, is updated, it fires the event in 
the sub component's class component called updated
	updated function will fire and run after any update to the Livewire component's data (Using 
	wire:model, not directly inside PHP)

    public function updated($name, $value)
    {
        $this->emit("credentialUpdated", $this->allCredentials);
    }

4. Once this->emit is triggered, it went back to the main component and look for the 
credentialUpdated function

which updates the credentialData thru customerShow:

	public function credentialUpdated($credentialData)
	{
		$this->credentials = $credentialData;
	}
